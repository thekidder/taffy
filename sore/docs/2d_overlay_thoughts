Interfaces will include a resource file for aspect ratio - 4:3, 5:4, 16:10, 16:9
When engine is initialized and interface is loaded, if a file for the correct ratio is not found, it looks for the closest one and stretches it.


example
Interface modern specifies these files
4_3.ui
16_10.ui

We are using a 5:4 ratio, but there is no 5:4 interface. The engine does some calculations:
4/3   = 1.33
16/10 = 1.6

5/4   = 1.25

4/3 (1.33) is closest to 1.25, so the engine loads 4_3.ui
All vertical measurements are multiplied by 5/4 or 1.25
All horizontal measurements are multiplied by 4/3 or 1.33

Next, the engine multiplies interface coordinates to window coordinates. 
If a text string was placed at (0, 1.3) in a 4/3 aspect ui, in a 800x600 window it would be placed
at (0, 260) window coordinates. Graphics are stretched to fit their bounds, etc

Summary:
 - 2D elements are drawn using window coordinates (as ints)
 - Interface elements are specified using coordinates based on aspect ratio (as doubles)
   (0-4, 0-3), (0-5, 0-4), (0-16, 0-9), (0-16, 0-10) etc
 - If a interface can not be found to match the current aspect ratio, the closest one is used




2d graphics thoughts
sore_graphics.cpp/h (to be renamed)
namespace sore_2doverlay
	contains generic 2-demensional rendering functions in window coordinates (0 left, 0 top) -> (width right, height, bottom)
	drawing fonts
	drawing openGL textures
	lines, etc, etc

sore_hud.cpp/h
namespace sore_hud
	contains functions to load .hud file, transform hud coordinates to window coordinates, display a .hud via sore_graphics
	
sore_widgets.cpp/h ?
namespace sore_widgets
	definitions for skinnable widgets like those in most widget toolkits
		buttons
		scrollbars
		listboxes
		etc etc